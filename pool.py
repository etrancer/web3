import os
from web3 import Web3
from web3.middleware import geth_poa_middleware
from dotenv import load_dotenv
import json
from decimal import Decimal

load_dotenv()

w3 = Web3(Web3.HTTPProvider("https://ethereum-sepolia-rpc.publicnode.com"))
w3.middleware_onion.inject(geth_poa_middleware, layer=0)

assert w3.is_connected(), "RPC –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"

# === ENV ===
FACTORY = Web3.to_checksum_address(os.getenv("FACTORY_ADDRESS"))
WETH = Web3.to_checksum_address(os.getenv("WETH_ADDRESS"))
DAI = Web3.to_checksum_address(os.getenv("DAI_ADDRESS"))
FEE = 3000  # 0.3% pool

# === ABIs ===
with open("abis/uniswap_factory_abi.json") as f:
    factory_abi = json.load(f)
with open("abis/uniswap_pool_abi.json") as f:
    pool_abi = json.load(f)
with open("abis/erc20_abi.json") as f:
    erc20_abi = json.load(f)

factory = w3.eth.contract(address=FACTORY, abi=factory_abi)

# === –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø—É–ª–∞ ===
pool_address = factory.functions.getPool(WETH, DAI, FEE).call()
if pool_address == "0x0000000000000000000000000000000000000000":
    print("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit()

print(f"‚úÖ –ê–¥—Ä–µ—Å –ø—É–ª–∞: {pool_address}")
pool = w3.eth.contract(address=pool_address, abi=pool_abi)

# === –ß—Ç–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–∞ ===
slot0 = pool.functions.slot0().call()
sqrtPriceX96 = slot0[0]
tick = slot0[1]
liquidity = pool.functions.liquidity().call()
token0 = pool.functions.token0().call()
token1 = pool.functions.token1().call()

print(f"üìä sqrtPriceX96: {sqrtPriceX96}")
print(f"üìà Tick: {tick}")
print(f"üíß Liquidity: {liquidity}")
print(f"üîó Token0: {token0}")
print(f"üîó Token1: {token1}")

# === –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É ===
def price_from_sqrtX96(sqrt_price_x96):
    return Decimal(sqrt_price_x96) ** 2 / (2 ** 192)

price = price_from_sqrtX96(sqrtPriceX96)
print(f"üí± –¶–µ–Ω–∞ (token1/token0): {price:.6f}")

