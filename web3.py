import os
from web3 import Web3
from web3.middleware import geth_poa_middleware
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
SENDER = os.getenv("SENDER_ADDRESS")
PRIVATE_KEY = os.getenv("PRIVATE_KEY")
RECEIVER = os.getenv("RECEIVER_ADDRESS")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ Sepolia
RPC_URL = "https://ethereum-sepolia-rpc.publicnode.com"
w3 = Web3(Web3.HTTPProvider(RPC_URL))
w3.middleware_onion.inject(geth_poa_middleware, layer=0)

assert w3.is_connected(), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏ Sepolia"

def eth(val_wei):
    return w3.from_wei(val_wei, "ether")

def get_balance(address):
    return eth(w3.eth.get_balance(address))

def get_nonce(address):
    return w3.eth.get_transaction_count(address)

def is_contract(address):
    return w3.eth.get_code(address) != b''

def get_transaction_info(tx_hash):
    receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    block = w3.eth.get_block(receipt.blockNumber)
    timestamp = datetime.utcfromtimestamp(block.timestamp).strftime('%Y-%m-%d %H:%M:%S')
    return {
        "status": receipt.status,
        "block": receipt.blockNumber,
        "gas_used": receipt.gasUsed,
        "timestamp": timestamp,
        "confirmations": w3.eth.block_number - receipt.blockNumber
    }

def get_latest_block_info():
    block = w3.eth.get_block('latest')
    return {
        "number": block.number,
        "timestamp": datetime.utcfromtimestamp(block.timestamp).strftime('%Y-%m-%d %H:%M:%S'),
        "tx_count": len(block.transactions),
        "gas_limit": block.gasLimit,
        "base_fee": eth(block.baseFeePerGas) if 'baseFeePerGas' in block else None
    }

def estimate_gas(to_address, value_eth):
    txn = {
        'from': SENDER,
        'to': to_address,
        'value': w3.to_wei(value_eth, 'ether')
    }
    return w3.eth.estimate_gas(txn)

def send_eth(amount_eth):
    nonce = get_nonce(SENDER)
    tx = {
        "type": 2,
        "nonce": nonce,
        "to": RECEIVER,
        "value": w3.to_wei(amount_eth, "ether"),
        "gas": 21000,
        "maxFeePerGas": w3.to_wei(3, "gwei"),
        "maxPriorityFeePerGas": w3.to_wei(1, "gwei"),
        "chainId": w3.eth.chain_id
    }
    signed_tx = w3.eth.account.sign_transaction(tx, PRIVATE_KEY)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
    return tx_hash.hex()

# === –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ===

print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Sepolia, Chain ID:", w3.eth.chain_id)
print("üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫:", w3.eth.block_number)
print(f"üíº –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {SENDER}")
print(f"üí∞ –ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {get_balance(SENDER)} ETH")
print(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {get_balance(RECEIVER)} ETH")
print(f"üßæ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è ‚Äî {'–∫–æ–Ω—Ç—Ä–∞–∫—Ç' if is_contract(RECEIVER) else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ ETH
amount = 0.001
print(f"\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ {amount} ETH ‚Üí {RECEIVER}...")
tx_hash = send_eth(amount)
print(f"üì§ TX –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash}")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
info = get_transaction_info(tx_hash)
print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
for k, v in info.items():
    print(f"{k}: {v}")

# –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
block_info = get_latest_block_info()
print("\nüß± –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫:")
for k, v in block_info.items():
    print(f"{k}: {v}")

# –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
gas_est = estimate_gas(RECEIVER, 0.001)
print(f"\n‚õΩ –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –¥–ª—è 0.001 ETH ‚Üí {RECEIVER}: {gas_est} –µ–¥–∏–Ω–∏—Ü")
